
var states = {"United States":
[{2016:	['19,959,114',	'107.17',	'61,769']},
{2015:	['19,080,139',	'105.30',	'59,459']},
{2014:	['18,311,896',	'105.07',	'57,483']},
{2013:	['17,592,696',	'105.40',	'55,637']},
{2012:	['16,726,412',	'103.54',	'53,269']},
{2011:	['15,512,758',	'99.97',	'49,774']},
{2010:	['14,316,023',	'95.67',	'46,278']},
{2009:	['12,541,305',	'86.98',	'40,882']},
{2008:	['10,851,084',	'73.72',	'35,683']},
{2007:	['9,356,570',	'64.63',	'31,061']},
{2006:	['8,879,517',	'64.09',	'29,759']},
{2005:	['8,542,286',	'65.24',	'28,906']},
{2004:	['8,076,972',	'65.80',	'27,585']},
{2003:	['6,722,371',	'58.40',	'23,172']},
{2002:	['6,079,217',	'55.38',	'21,136']},
{2001:	['5,631,898',	'53.02',	'19,763']},
{2000:	['5,456,855',	'53.03',	'19,339']},
{1999:	['5,690,941',	'58.88',	'20,395']},
{1998:	['5,678,174',	'62.47',	'20,584']},
{1997:	['5,648,937',	'65.62',	'20,719']},
{1996:	['5,510,358',	'68.03',	'20,455']},
{1995:	['5,272,904',	'68.80',	'19,802']},
{1994:	['5,071,770',	'69.39',	'19,275']},
{1993:	['4,828,298',	'70.19',	'18,576']},
{1992:	['4,486,290',	'68.61',	'17,489']},
{1991:	['4,097,634',	'66.37',	'16,197']},
{1990:	['3,706,533',	'61.99',	'14,849']},
{1989:	['3,410,385',	'60.28',	'13,817']},
{1988:	['3,159,256',	'60.15',	'12,921']},
{1987:	['2,886,835',	'59.28',	'11,915']},
{1986:	['2,640,301',	'57.52',	'10,995']},
{1985:	['2,351,233',	'54.09',	'9,882']},
{1984:	['2,000,685',	'49.51',	'8,484']},
{1983:	['1,740,789',	'47.85',	'7,446']},
{1982:	['1,504,575',	'44.98',	'6,495']},
{1981:	['1,294,824',	'40.33',	'5,643']},
{1980:	['1,178,733',	'41.18',	'5,188']},
]}












axios.get(`http://api.worldbank.org/v2/countries/${code}/?format=json`)




<button type="submit" onClick={this.props.removeTaskFunction(todo)}>Submit</button>

<button type="submit" onClick={() => { this.props.removeTaskFunction(todo) }}>Submit</button>












// handleSubmit(event) {
//   event.preventDefault();
//
//   for (let i = 0; i < country_list.length; i++) {
//     if (letters.toLowerCase() == Object.keys(country_list)[i].toLowerCase()) {
//       this.state.countryCode = country_list[i];
//     }
//
//   }
//
//   // componentDidMount() {
//   //   axios.get(`
//   //     http://api.worldbank.org/v2/countries/wld/indicators/SP.POP.TOTL?format=json
//   //     `)
//   //   .then(res => {
//   //     this.setState({ info: res.data });
//   //     this.setState({ popper: res.data[1][0].value });
//   //     console.log(this.state.popper);
//   //
//   //   });
//   // }
//
//
// }







//Shapes.js
var React = require('react');
var Component = React.Component;
class Color extends Component {
  render() {
    const divStyle = {
      backgroundColor: this.props.name,
      color: 'white',
      fontSize: '20px',
      height: '100px',
      width: '100px'
    }
    return (
      <div style={divStyle}>{this.props.name}</div>
    )
  }
}
module.exports = Color;




// persons example
componentDidMount() {
    axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {
      console.log(res);
      this.setState({ persons: res.data });
    });
  }

  render() {
    return(
      <ul>
        {this.state.persons.map(person => <li key={person.id}>{person.name}</li>)}
      </ul>
    )
  }









//  VVV  google map example
import React, { Component } from 'react';
import GoogleMapReact from 'google-map-react';

const AnyReactComponent = ({ text }) => <div>{ text }</div>;

export default class Map extends Component {
  static defaultProps = {
    center: { lat: 40.7446790, lng: -73.9485420 },
    zoom: 11
  }
render() {
    return (
      <div className='google-map'>
        <GoogleMapReact
          defaultCenter={ this.props.center }
          defaultZoom={ this.props.zoom }>
          <AnyReactComponent
            lat={ 40.7473310 }
            lng={ -73.8517440 }
            text={ 'Where is Waldo?' }
          />
        </GoogleMapReact>
      </div>
    )
  }
}








//   VVV   codes
Region codes
WLD - All countries
EAP - (developing only)
EAS - (all income levels)
ECA - (developing only)
ECS - (all income levels)
LAC - (developing only)
LCN - (all income levels)
MNA - (developing only)
MEA - (all income levels)
NAC
SAS
SSA - (developing only)
SSF - (all income levels)
Income level codes
NOC
OEC
HIC
HPC
LIC
LMC
LMY
MIC
UMC
